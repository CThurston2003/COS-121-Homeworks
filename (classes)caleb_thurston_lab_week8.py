# -*- coding: utf-8 -*-
"""(CLASSES)Caleb_Thurston_Lab_Week8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NlWKq8xGnrwgzIi-fONnof_qOz20w9bR

In this week's lab, we will focus on what we have learned in our previous lectures. This lab explores concepts related to Classes (lectures Oct 3 and 5), Loops (lecture Oct 12), and Lists (lecture Oct 17).

Let's look at an example before beginning the exercise.

The following code shows the basics of "class." First, we define a class (with the "class" keyword) and write code inside it. Then, we create an object of the class and use the object to access the attributes (variables) and functions of that class.

Think of an "object" as a more complex form of a variable capable of holding multiple variables and functions tied to the object.

Run the code-segment, read the comments beside each line, follow the syntax, and observe what is happening.
"""

#Class Example

class Person:  #Here, we define a class with the "class" keyword and the class name, "Person"

    age = 10   #we introduce a variable "age" inside the "Person" class and set its value to 10
               #Notice that this class didn't require us to write self.age = age to run.
               #In this case, it works because we have only one instance of "age" that we are computing

    def greet(self):   #Here, we define a function "greet" with the parameter "self" inside it. Functions inside a class are a "method." 
                       #Whenever we define a method inside a class, "self" is the default parameter. 
                       #It helps us access the method with an object (more on this later)
        print('Hello, I am Harry and my age is', self.age) #we write a print statement inside the function "greet"
                       #the function "greet" is now a "method" of the "class."

harry = Person()   #Here, we create the object of the "Person" class. 
                   #We created an object of the class with these steps: objectname (e.g. "harry") = classname() (e.g. "Person")

print(harry.age)   #Now we can access the variable "age" that we declared inside the class "Person" by using the object. 

harry.greet()   #We can also access the "greet" function with the object. 
                #Whenever we access any function with any object, the object itself is passed as the first argument. 
                #This is the reason we always have the default parameter "self" while defining any function inside a class.

"""One interesting use for class in python is that we can create as many objects as we want for a single class. Each object can hold different values and we can pass them as arguements. We can do this by defining the `__init__(self)` function inside the class. This special function is called whenever a new object of that class is instantiated. Inside this special function, we can **bind the attributes of a class with the given arguments**.

For example, we want to write a class `Car` that has a function ```
show(self)```, which will print a car model and the color of the car. We will create two objects for this class and each of the objects will hold a car model name and the color of the car. 

Follow the comments and write the code accordingly. We defined the `__init__(self)` function with proper comments to help.

Complete the code, read the comments, run the program, and observe what is happening!
"""

#Lab Exercise 1
#YOUR CODE IS HERE 

class Car:
#First, define a class with the name "Car" as we did in the previous example

#Inside the "Car" class, we define the function __init__. We did this for you below. 
#Observe the number of paraemeters we have inside the method and pay attention to the identtation. 
                                  
  def __init__(self,model,color):   #we have 3 paraemeters:
                                    #"self": this will take the object as an arguement; "model" for the car model; and "color" the color of the car
    self.model=model                #In programming, this is called "binding". 
    self.color=color                #We are binding the attributes (self.model and self.color) with the given arguement (model, color)

  #Here, you need to define the function "show (self)". 
  #Inside the function, write a print statement that will print the self.model and the self.color. 
  def show(self):
    print(self.model)
    print(self.color)
#Here we will create two objects for the "car" class. We've made the first one for you. Each new object should contain the car model and color. 
Audi = Car("audi a4", "blue")

#Python will automically call the __init__ method with the "Audi" object and will bind the variable model and color with their corresponding values.

#Now we will call the show function with the Audi object 
Audi.show()

#YOUR TASK:
#create another object that will have different values (ex., Toyota, Red) 
#Call the function "show" with the new object. 
   
Toyota = Car("Toyota Model Something", "Red")

Toyota.show()

"""Now we know how to define classes, create objects with different values, and access functions with objects. 

Next, we will use loops and lists. You will write a program that will keep storing the car models until the user enters "Exit". 

We will use the "while" loop to compare the user input. if the user inputs anything except "Exit", we will store the entry in a `List` by using the `append()` keyword. 

We will write the program following the steps as described below:

1. Define a class similar to previous one, "Car"
2. Inside the class, define `__init__` and bind the variables with the arguements (similar to the previous example)
3. Insdie the class, define another function `storeCarModel(self)`
4. Inside the `storeCarModel` function, take the car model as an input from the user and set it to the variable "car_model"
5. Write a "while" loop that checks if the input is "Exit" or not
6. Inside the loop, add the value of the "car_model" inside a list as follows: self.car_list(car_model)
7. Inside the loop, ask the user again for the car model and set it to the variable "car_model"
8. Outside of the while loop, print the "car_list"
9. Outside of the "Car" class, declare a list variable as follows: `car_list=[]`
10. Create an object of the "Car" class and pass the "car_list" as one of the arguements
11. Use the object to call the "storeCarModel" function

Follow the comments below.


"""

#Lab Exercise 2
#YOUR CODE IS HERE

#define a class with the name "Car"
#Inside the Car class, define the __init__ function with the variables: self, car_list
    #inside the __init__ function, bind self.car_list to car_list (same as previous exercise)

  #Now, define another function "storeCarModel(self)"
  #Inside the "storeCarModel(self)" function: ask the user to input the car model and set it to the variable "Car"
  #Write a "while" loop that will execute until the value of  "Car" is "Exit".
      #inside the while loop, add the value of the car to the list as follows: self.car_list.append(car)
      #ask the user again for the car model and set it to the same variable "Car"

    #outside the loop, write a print statement to print the values of car_list
car_list = []

class Car:
  def __init__(self, car_list):
    self.car_list=car_list
  
  def storeCarModel(self):
    Car = input("Input car model here!")

    while Car != "Exit":
      self.car_list.append(Car)
      Car = input("Input car model here!")

    print("The Listed Car models are:",car_list)

plyrCar = Car(car_list)
plyrCar.storeCarModel() 

#outside of the class, create an empty list: car_list=[]

#create an object of the "Car" class with the value Car(car_list)
#use the object to call the function "storeCarModel"

"""The output for the above program should look like:



```
What is the Car model: Audi
What is the Car model: Toyota
What is the Car model: Nissan
What is the Car model: Prado
What is the Car model: Exit
The Car models are as follows:  ['Audi', 'Toyota', 'Nissan', 'Prado']
```

Now we know how to store information in a list using methods in a class. Can we look for "specific" information in the list and print it?

We can easily do it with the `in` keyword. For example, if we want to check if the list has the model "Audi" or not, we write the following code `if "Audi" in car_List:`

Your next task is to write another function named `CarChecker` inside the `Car` class (copy down your code from above). Inside this function, you will ask the user for the car model and set it to the variable named `CarModel`. Then, check, if the `CarModel` exists in the `car_list`. If it exists, we will print "The car model X exists in the record", where x is the car model. 

This is a simple extension of the previous program. Follow the comments below and write the code accordingly! 

***Note: This exercise is exactly the same as previous one with a few extensions! You can simply copy paste the code you already wrote and then write another function `CarChecker` inside the class.**
"""

#Define a class with the name "Car"

  #Inside the Car class, define the __init__ function as follows: def __init__(self,car_list)
    #inside the __init_ function, bind the self.car_list to car_list

  #Define another function "storeCarModel(self)"
    #Inside the "storeCarModel(self)" function: ask the input from the user the car model and set it to the variable "Car"
    
    #Write a "while" loop that will execute until the value of  "Car" is "Exit".
      #Inside the loop, add the value of the car to the list as follows: self.car_list.append(car)
      #Ask user again for the car model and set it to the same variable: "Car"

    #Outside the loop, write a print statement to print the values of car_list

car_list = []

class Car:
  def __init__(self, car_list):
    self.car_list=car_list
  
  def storeCarModel(self):
    Car = input("Input car model here!")

    while Car != "Exit":
      self.car_list.append(Car)
      Car = input("Input car model here!")

    print("The Listed Car models are:",car_list)
  
  def carChecker(self):
    carModel = input("What's the name of the model?")
    if carModel in car_list:
      print("This car model exists in the record")
    else:
      print("Sorry, no record of that car found here...")

plyrCar = Car(car_list)
plyrCar.storeCarModel() 
plyrCar.carChecker()

#EXERCISE 3'S NEW CODE STARTS HERE
  #Define another function "carChecker(self)" function

    #Inside the function, ask the user the name of the model and set it to a variable named "CarModel"
    #Check if the "CarModel" is "in" the "car_list"
      #Write a print statement that prints, "The car model exists in the record." if it's true
    
    #Else
      #write a print statement that prints, "Sorry, no record found."

#Outside of the class:
#create an empty list as follows: car_list=[]

#create an object of the "Car" class with the value Car(car_list)
#use the object to call the function "storeCarModel"

#use the object to call our new function "carChecker"

"""The output of the above-mentioned program should be as follows: 

One sample input:
```
# Which Car Model You Want To Check? Audi
Car Model Audi Exists in the Record!
```

Another sample input:

```
# Which Car Model You Want To Check? Honda
Sorry! No Record is Found!
```

**Bonus Problem:**
This following exercise is a bonus! You don't have to complete it, but if you're really comfortable with all the code above, you should try this out. We will now play around with the `inheritance` concept in the class. `Inheritance` allows us to define a class that `inherits` all the methods and properties from another class. The `Parent class` is the class being inherited from. The `Child class` is the class that inherits from another class.

We will write a class (parent) class named `Person` which will have attributes such as `First_Name` and `Last_Name` and a function named `PrintDetails`. Follow the comments below step by step to write the parent class, this is exactly the same as writing any class!
"""

###Lab Exercise Bonus Problem######

#Part 1

#YOUR CODE IS HERE
#####Write the Parent Class######
#Define a class "Person" , this is our parent class

  #Define  __init__ function with the following parameters: self, First_Name, Last_Name
    #Bind the attributes with the arguements. [Hint: self.First_Name=First_Name]

  #Define a fuction "PrintDetails(self)"
    #Inside the function write a print statement that prints the First_Name, Last_Name


#Create an object: "P1" of the "Person" class with the following values: "Samuel", "Thompson"

#Use the object to call the "PrintDetails" function

"""Our parent class `Person` has following attributes: first name and last name. Now, we want to have a class `Student` that will inherit all the attributes of the `Person`s class, including its function! This means we do not need to again declare first name and last name for the `Student` class. We can simply create an object of the `Student` class and access the attributes and functions of the `Person` class. How can we do it?


Since `Student` class is `inheritly` have all the attributes from the `Person` class, we call `Student` class as the `Child` class of the `Person` Class. 

We simply write a child class following the format shown below:

```
class child_class_name (parent_class_name):
```
In our program, the child_class_name is `Student`, and the parent_class_name is `Person`. 

Our task is to access all the attributes from the parent class. We can do it with the `super()` keyword!

Follow the comments step by step and write the code. 



"""

###Lab Exercise Bonus Problem######

#Part 2

#YOUR CODE IS HERE

###write the child class###

#define the child class `Student` as explained above

  #inside the `Student` class, define our "__init__" function with four  parameters: self, FName, LName, GradYear
    #inside the "__init__" function, use the super keyword and:
    
    #Call the Person Class's "__init__" function with "exactly" the number of parameters the "__init__" function has.
    super().__init__(self,FName,LName)   #<<< Note that, we only passed FName and LName as arguements, because 
                                        #in our "Person" class, our __init__ function takes only two arguements 
    
    #We also need to bind the "GradYear" arguement as follows: self.GradYear=GradYear 

  #now define another function "welcome_message(self)"
    #inside the function, write a print statement that prints the following message: "Welcome FName LName to the class of GradYear"


#Outside of the class:

#Create an object "S1" for the "Student" class with the following values: "Mike", "Allen", 2020
#Call the "PrintDetails" function using the S1 object
#Call the "welcome_message" function using the S1 object

"""With our child class object S1, we can access our parent class Person's function "Print_Details". We can also print the welcome message! The above-mentioned program should print as follows: 



```
The person's full name is Mike Allen.
Welcome Mike Allen to the class of 2020!
```


"""

